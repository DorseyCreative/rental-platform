"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/signature_pad";
exports.ids = ["vendor-chunks/signature_pad"];
exports.modules = {

/***/ "(ssr)/./node_modules/signature_pad/dist/signature_pad.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/signature_pad/dist/signature_pad.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * Signature Pad v2.3.2\n * https://github.com/szimek/signature_pad\n *\n * Copyright 2017 Szymon Nowak\n * Released under the MIT license\n *\n * The main idea and some parts of the code (e.g. drawing variable width Bézier curve) are taken from:\n * http://corner.squareup.com/2012/07/smoother-signatures.html\n *\n * Implementation of interpolation using cubic Bézier curves is taken from:\n * http://benknowscode.wordpress.com/2012/09/14/path-interpolation-using-cubic-bezier-and-control-point-estimation-in-javascript\n *\n * Algorithm for approximated length of a Bézier curve is taken from:\n * http://www.lemoda.net/maths/bezier-length/index.html\n *\n */ function Point(x, y, time) {\n    this.x = x;\n    this.y = y;\n    this.time = time || new Date().getTime();\n}\nPoint.prototype.velocityFrom = function(start) {\n    return this.time !== start.time ? this.distanceTo(start) / (this.time - start.time) : 1;\n};\nPoint.prototype.distanceTo = function(start) {\n    return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));\n};\nPoint.prototype.equals = function(other) {\n    return this.x === other.x && this.y === other.y && this.time === other.time;\n};\nfunction Bezier(startPoint, control1, control2, endPoint) {\n    this.startPoint = startPoint;\n    this.control1 = control1;\n    this.control2 = control2;\n    this.endPoint = endPoint;\n}\n// Returns approximated length.\nBezier.prototype.length = function() {\n    var steps = 10;\n    var length = 0;\n    var px = void 0;\n    var py = void 0;\n    for(var i = 0; i <= steps; i += 1){\n        var t = i / steps;\n        var cx = this._point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);\n        var cy = this._point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);\n        if (i > 0) {\n            var xdiff = cx - px;\n            var ydiff = cy - py;\n            length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n        }\n        px = cx;\n        py = cy;\n    }\n    return length;\n};\n/* eslint-disable no-multi-spaces, space-in-parens */ Bezier.prototype._point = function(t, start, c1, c2, end) {\n    return start * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * c1 * (1.0 - t) * (1.0 - t) * t + 3.0 * c2 * (1.0 - t) * t * t + end * t * t * t;\n};\n/* eslint-disable */ // http://stackoverflow.com/a/27078401/815507\nfunction throttle(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function later() {\n        previous = options.leading === false ? 0 : Date.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n    };\n    return function() {\n        var now = Date.now();\n        if (!previous && options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\nfunction SignaturePad(canvas, options) {\n    var self = this;\n    var opts = options || {};\n    this.velocityFilterWeight = opts.velocityFilterWeight || 0.7;\n    this.minWidth = opts.minWidth || 0.5;\n    this.maxWidth = opts.maxWidth || 2.5;\n    this.throttle = \"throttle\" in opts ? opts.throttle : 16; // in miliseconds\n    this.minDistance = \"minDistance\" in opts ? opts.minDistance : 5;\n    if (this.throttle) {\n        this._strokeMoveUpdate = throttle(SignaturePad.prototype._strokeUpdate, this.throttle);\n    } else {\n        this._strokeMoveUpdate = SignaturePad.prototype._strokeUpdate;\n    }\n    this.dotSize = opts.dotSize || function() {\n        return (this.minWidth + this.maxWidth) / 2;\n    };\n    this.penColor = opts.penColor || \"black\";\n    this.backgroundColor = opts.backgroundColor || \"rgba(0,0,0,0)\";\n    this.onBegin = opts.onBegin;\n    this.onEnd = opts.onEnd;\n    this._canvas = canvas;\n    this._ctx = canvas.getContext(\"2d\");\n    this.clear();\n    // We need add these inline so they are available to unbind while still having\n    // access to 'self' we could use _.bind but it's not worth adding a dependency.\n    this._handleMouseDown = function(event) {\n        if (event.which === 1) {\n            self._mouseButtonDown = true;\n            self._strokeBegin(event);\n        }\n    };\n    this._handleMouseMove = function(event) {\n        if (self._mouseButtonDown) {\n            self._strokeMoveUpdate(event);\n        }\n    };\n    this._handleMouseUp = function(event) {\n        if (event.which === 1 && self._mouseButtonDown) {\n            self._mouseButtonDown = false;\n            self._strokeEnd(event);\n        }\n    };\n    this._handleTouchStart = function(event) {\n        if (event.targetTouches.length === 1) {\n            var touch = event.changedTouches[0];\n            self._strokeBegin(touch);\n        }\n    };\n    this._handleTouchMove = function(event) {\n        // Prevent scrolling.\n        event.preventDefault();\n        var touch = event.targetTouches[0];\n        self._strokeMoveUpdate(touch);\n    };\n    this._handleTouchEnd = function(event) {\n        var wasCanvasTouched = event.target === self._canvas;\n        if (wasCanvasTouched) {\n            event.preventDefault();\n            self._strokeEnd(event);\n        }\n    };\n    // Enable mouse and touch event handlers\n    this.on();\n}\n// Public methods\nSignaturePad.prototype.clear = function() {\n    var ctx = this._ctx;\n    var canvas = this._canvas;\n    ctx.fillStyle = this.backgroundColor;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    this._data = [];\n    this._reset();\n    this._isEmpty = true;\n};\nSignaturePad.prototype.fromDataURL = function(dataUrl) {\n    var _this = this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var image = new Image();\n    var ratio = options.ratio || window.devicePixelRatio || 1;\n    var width = options.width || this._canvas.width / ratio;\n    var height = options.height || this._canvas.height / ratio;\n    this._reset();\n    image.src = dataUrl;\n    image.onload = function() {\n        _this._ctx.drawImage(image, 0, 0, width, height);\n    };\n    this._isEmpty = false;\n};\nSignaturePad.prototype.toDataURL = function(type) {\n    var _canvas;\n    switch(type){\n        case \"image/svg+xml\":\n            return this._toSVG();\n        default:\n            for(var _len = arguments.length, options = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                options[_key - 1] = arguments[_key];\n            }\n            return (_canvas = this._canvas).toDataURL.apply(_canvas, [\n                type\n            ].concat(options));\n    }\n};\nSignaturePad.prototype.on = function() {\n    this._handleMouseEvents();\n    this._handleTouchEvents();\n};\nSignaturePad.prototype.off = function() {\n    this._canvas.removeEventListener(\"mousedown\", this._handleMouseDown);\n    this._canvas.removeEventListener(\"mousemove\", this._handleMouseMove);\n    document.removeEventListener(\"mouseup\", this._handleMouseUp);\n    this._canvas.removeEventListener(\"touchstart\", this._handleTouchStart);\n    this._canvas.removeEventListener(\"touchmove\", this._handleTouchMove);\n    this._canvas.removeEventListener(\"touchend\", this._handleTouchEnd);\n};\nSignaturePad.prototype.isEmpty = function() {\n    return this._isEmpty;\n};\n// Private methods\nSignaturePad.prototype._strokeBegin = function(event) {\n    this._data.push([]);\n    this._reset();\n    this._strokeUpdate(event);\n    if (typeof this.onBegin === \"function\") {\n        this.onBegin(event);\n    }\n};\nSignaturePad.prototype._strokeUpdate = function(event) {\n    var x = event.clientX;\n    var y = event.clientY;\n    var point = this._createPoint(x, y);\n    var lastPointGroup = this._data[this._data.length - 1];\n    var lastPoint = lastPointGroup && lastPointGroup[lastPointGroup.length - 1];\n    var isLastPointTooClose = lastPoint && point.distanceTo(lastPoint) < this.minDistance;\n    // Skip this point if it's too close to the previous one\n    if (!(lastPoint && isLastPointTooClose)) {\n        var _addPoint = this._addPoint(point), curve = _addPoint.curve, widths = _addPoint.widths;\n        if (curve && widths) {\n            this._drawCurve(curve, widths.start, widths.end);\n        }\n        this._data[this._data.length - 1].push({\n            x: point.x,\n            y: point.y,\n            time: point.time,\n            color: this.penColor\n        });\n    }\n};\nSignaturePad.prototype._strokeEnd = function(event) {\n    var canDrawCurve = this.points.length > 2;\n    var point = this.points[0]; // Point instance\n    if (!canDrawCurve && point) {\n        this._drawDot(point);\n    }\n    if (point) {\n        var lastPointGroup = this._data[this._data.length - 1];\n        var lastPoint = lastPointGroup[lastPointGroup.length - 1]; // plain object\n        // When drawing a dot, there's only one point in a group, so without this check\n        // such group would end up with exactly the same 2 points.\n        if (!point.equals(lastPoint)) {\n            lastPointGroup.push({\n                x: point.x,\n                y: point.y,\n                time: point.time,\n                color: this.penColor\n            });\n        }\n    }\n    if (typeof this.onEnd === \"function\") {\n        this.onEnd(event);\n    }\n};\nSignaturePad.prototype._handleMouseEvents = function() {\n    this._mouseButtonDown = false;\n    this._canvas.addEventListener(\"mousedown\", this._handleMouseDown);\n    this._canvas.addEventListener(\"mousemove\", this._handleMouseMove);\n    document.addEventListener(\"mouseup\", this._handleMouseUp);\n};\nSignaturePad.prototype._handleTouchEvents = function() {\n    // Pass touch events to canvas element on mobile IE11 and Edge.\n    this._canvas.style.msTouchAction = \"none\";\n    this._canvas.style.touchAction = \"none\";\n    this._canvas.addEventListener(\"touchstart\", this._handleTouchStart);\n    this._canvas.addEventListener(\"touchmove\", this._handleTouchMove);\n    this._canvas.addEventListener(\"touchend\", this._handleTouchEnd);\n};\nSignaturePad.prototype._reset = function() {\n    this.points = [];\n    this._lastVelocity = 0;\n    this._lastWidth = (this.minWidth + this.maxWidth) / 2;\n    this._ctx.fillStyle = this.penColor;\n};\nSignaturePad.prototype._createPoint = function(x, y, time) {\n    var rect = this._canvas.getBoundingClientRect();\n    return new Point(x - rect.left, y - rect.top, time || new Date().getTime());\n};\nSignaturePad.prototype._addPoint = function(point) {\n    var points = this.points;\n    var tmp = void 0;\n    points.push(point);\n    if (points.length > 2) {\n        // To reduce the initial lag make it work with 3 points\n        // by copying the first point to the beginning.\n        if (points.length === 3) points.unshift(points[0]);\n        tmp = this._calculateCurveControlPoints(points[0], points[1], points[2]);\n        var c2 = tmp.c2;\n        tmp = this._calculateCurveControlPoints(points[1], points[2], points[3]);\n        var c3 = tmp.c1;\n        var curve = new Bezier(points[1], c2, c3, points[2]);\n        var widths = this._calculateCurveWidths(curve);\n        // Remove the first element from the list,\n        // so that we always have no more than 4 points in points array.\n        points.shift();\n        return {\n            curve: curve,\n            widths: widths\n        };\n    }\n    return {};\n};\nSignaturePad.prototype._calculateCurveControlPoints = function(s1, s2, s3) {\n    var dx1 = s1.x - s2.x;\n    var dy1 = s1.y - s2.y;\n    var dx2 = s2.x - s3.x;\n    var dy2 = s2.y - s3.y;\n    var m1 = {\n        x: (s1.x + s2.x) / 2.0,\n        y: (s1.y + s2.y) / 2.0\n    };\n    var m2 = {\n        x: (s2.x + s3.x) / 2.0,\n        y: (s2.y + s3.y) / 2.0\n    };\n    var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n    var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n    var dxm = m1.x - m2.x;\n    var dym = m1.y - m2.y;\n    var k = l2 / (l1 + l2);\n    var cm = {\n        x: m2.x + dxm * k,\n        y: m2.y + dym * k\n    };\n    var tx = s2.x - cm.x;\n    var ty = s2.y - cm.y;\n    return {\n        c1: new Point(m1.x + tx, m1.y + ty),\n        c2: new Point(m2.x + tx, m2.y + ty)\n    };\n};\nSignaturePad.prototype._calculateCurveWidths = function(curve) {\n    var startPoint = curve.startPoint;\n    var endPoint = curve.endPoint;\n    var widths = {\n        start: null,\n        end: null\n    };\n    var velocity = this.velocityFilterWeight * endPoint.velocityFrom(startPoint) + (1 - this.velocityFilterWeight) * this._lastVelocity;\n    var newWidth = this._strokeWidth(velocity);\n    widths.start = this._lastWidth;\n    widths.end = newWidth;\n    this._lastVelocity = velocity;\n    this._lastWidth = newWidth;\n    return widths;\n};\nSignaturePad.prototype._strokeWidth = function(velocity) {\n    return Math.max(this.maxWidth / (velocity + 1), this.minWidth);\n};\nSignaturePad.prototype._drawPoint = function(x, y, size) {\n    var ctx = this._ctx;\n    ctx.moveTo(x, y);\n    ctx.arc(x, y, size, 0, 2 * Math.PI, false);\n    this._isEmpty = false;\n};\nSignaturePad.prototype._drawCurve = function(curve, startWidth, endWidth) {\n    var ctx = this._ctx;\n    var widthDelta = endWidth - startWidth;\n    var drawSteps = Math.floor(curve.length());\n    ctx.beginPath();\n    for(var i = 0; i < drawSteps; i += 1){\n        // Calculate the Bezier (x, y) coordinate for this step.\n        var t = i / drawSteps;\n        var tt = t * t;\n        var ttt = tt * t;\n        var u = 1 - t;\n        var uu = u * u;\n        var uuu = uu * u;\n        var x = uuu * curve.startPoint.x;\n        x += 3 * uu * t * curve.control1.x;\n        x += 3 * u * tt * curve.control2.x;\n        x += ttt * curve.endPoint.x;\n        var y = uuu * curve.startPoint.y;\n        y += 3 * uu * t * curve.control1.y;\n        y += 3 * u * tt * curve.control2.y;\n        y += ttt * curve.endPoint.y;\n        var width = startWidth + ttt * widthDelta;\n        this._drawPoint(x, y, width);\n    }\n    ctx.closePath();\n    ctx.fill();\n};\nSignaturePad.prototype._drawDot = function(point) {\n    var ctx = this._ctx;\n    var width = typeof this.dotSize === \"function\" ? this.dotSize() : this.dotSize;\n    ctx.beginPath();\n    this._drawPoint(point.x, point.y, width);\n    ctx.closePath();\n    ctx.fill();\n};\nSignaturePad.prototype._fromData = function(pointGroups, drawCurve, drawDot) {\n    for(var i = 0; i < pointGroups.length; i += 1){\n        var group = pointGroups[i];\n        if (group.length > 1) {\n            for(var j = 0; j < group.length; j += 1){\n                var rawPoint = group[j];\n                var point = new Point(rawPoint.x, rawPoint.y, rawPoint.time);\n                var color = rawPoint.color;\n                if (j === 0) {\n                    // First point in a group. Nothing to draw yet.\n                    // All points in the group have the same color, so it's enough to set\n                    // penColor just at the beginning.\n                    this.penColor = color;\n                    this._reset();\n                    this._addPoint(point);\n                } else if (j !== group.length - 1) {\n                    // Middle point in a group.\n                    var _addPoint2 = this._addPoint(point), curve = _addPoint2.curve, widths = _addPoint2.widths;\n                    if (curve && widths) {\n                        drawCurve(curve, widths, color);\n                    }\n                } else {\n                // Last point in a group. Do nothing.\n                }\n            }\n        } else {\n            this._reset();\n            var _rawPoint = group[0];\n            drawDot(_rawPoint);\n        }\n    }\n};\nSignaturePad.prototype._toSVG = function() {\n    var _this2 = this;\n    var pointGroups = this._data;\n    var canvas = this._canvas;\n    var ratio = Math.max(window.devicePixelRatio || 1, 1);\n    var minX = 0;\n    var minY = 0;\n    var maxX = canvas.width / ratio;\n    var maxY = canvas.height / ratio;\n    var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svg.setAttributeNS(null, \"width\", canvas.width);\n    svg.setAttributeNS(null, \"height\", canvas.height);\n    this._fromData(pointGroups, function(curve, widths, color) {\n        var path = document.createElement(\"path\");\n        // Need to check curve for NaN values, these pop up when drawing\n        // lines on the canvas that are not continuous. E.g. Sharp corners\n        // or stopping mid-stroke and than continuing without lifting mouse.\n        if (!isNaN(curve.control1.x) && !isNaN(curve.control1.y) && !isNaN(curve.control2.x) && !isNaN(curve.control2.y)) {\n            var attr = \"M \" + curve.startPoint.x.toFixed(3) + \",\" + curve.startPoint.y.toFixed(3) + \" \" + (\"C \" + curve.control1.x.toFixed(3) + \",\" + curve.control1.y.toFixed(3) + \" \") + (curve.control2.x.toFixed(3) + \",\" + curve.control2.y.toFixed(3) + \" \") + (curve.endPoint.x.toFixed(3) + \",\" + curve.endPoint.y.toFixed(3));\n            path.setAttribute(\"d\", attr);\n            path.setAttribute(\"stroke-width\", (widths.end * 2.25).toFixed(3));\n            path.setAttribute(\"stroke\", color);\n            path.setAttribute(\"fill\", \"none\");\n            path.setAttribute(\"stroke-linecap\", \"round\");\n            svg.appendChild(path);\n        }\n    }, function(rawPoint) {\n        var circle = document.createElement(\"circle\");\n        var dotSize = typeof _this2.dotSize === \"function\" ? _this2.dotSize() : _this2.dotSize;\n        circle.setAttribute(\"r\", dotSize);\n        circle.setAttribute(\"cx\", rawPoint.x);\n        circle.setAttribute(\"cy\", rawPoint.y);\n        circle.setAttribute(\"fill\", rawPoint.color);\n        svg.appendChild(circle);\n    });\n    var prefix = \"data:image/svg+xml;base64,\";\n    var header = \"<svg\" + ' xmlns=\"http://www.w3.org/2000/svg\"' + ' xmlns:xlink=\"http://www.w3.org/1999/xlink\"' + (' viewBox=\"' + minX + \" \" + minY + \" \" + maxX + \" \" + maxY + '\"') + (' width=\"' + maxX + '\"') + (' height=\"' + maxY + '\"') + \">\";\n    var body = svg.innerHTML;\n    // IE hack for missing innerHTML property on SVGElement\n    if (body === undefined) {\n        var dummy = document.createElement(\"dummy\");\n        var nodes = svg.childNodes;\n        dummy.innerHTML = \"\";\n        for(var i = 0; i < nodes.length; i += 1){\n            dummy.appendChild(nodes[i].cloneNode(true));\n        }\n        body = dummy.innerHTML;\n    }\n    var footer = \"</svg>\";\n    var data = header + body + footer;\n    return prefix + btoa(data);\n};\nSignaturePad.prototype.fromData = function(pointGroups) {\n    var _this3 = this;\n    this.clear();\n    this._fromData(pointGroups, function(curve, widths) {\n        return _this3._drawCurve(curve, widths.start, widths.end);\n    }, function(rawPoint) {\n        return _this3._drawDot(rawPoint);\n    });\n    this._data = pointGroups;\n};\nSignaturePad.prototype.toData = function() {\n    return this._data;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SignaturePad);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/signature_pad/dist/signature_pad.mjs\n");

/***/ })

};
;